angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","UserSvc",function(t,e){e.getUser().then(function(e){t.currentUser=e})}]),angular.module("app").controller("LoginCtrl",["$rootScope","$scope","UserSvc",function(t,e,n){e.login=function(e,o){n.login(e,o).then(function(e){t.currentUser=e})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){t.addPost=function(){t.postBody&&e.create({username:"dickeyxxx",body:t.postBody}).success(function(e){t.posts.unshift(e),t.postBody=null})},e.fetch().success(function(e){t.posts=e})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(n,o){e.register(n,o).then(function(e){t.$emit("login",e)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"})}]),angular.module("app").service("UserSvc",["$http","$rootScope",function(t){var e=this;e.getUser=function(){return t.get("/api/sessions/validate_user").then(function(e){return t.defaults.headers.common["X-Auth"]=e.data,t.get("/api/users")}).then(function(t){return console.log(t.data),t.data})},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(n){return e.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,e.getUser()})},e.register=function(n,o){return t.post("/api/users",{username:n,password:o}).then(function(){return e.login(n,o)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRyb290U2NvcGUiLCJVc2VyU3ZjIiwiZ2V0VXNlciIsInRoZW4iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCIkc2NvcGUiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJQb3N0c1N2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsImZldGNoIiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsInJlZ2lzdGVyIiwiJGVtaXQiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInN2YyIsImRhdGEiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJyZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJ0b2tlbiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FDRSxZQ0RGRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsbUJBQStCLGFBQUEsVUFBQSxTQUFBQyxFQUFBQyxHQUM3QkEsRUFBQUMsVUFBQUMsS0FBQSxTQUFBQyxHQUNFSixFQUFBSyxZQUFBRCxPQ0hKUCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBeUIsYUFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQU0sRUFBQUwsR0FDdkJLLEVBQUFDLE1BQUEsU0FBQUMsRUFBQUMsR0FDRVIsRUFBQU0sTUFBQUMsRUFBQUMsR0FDQU4sS0FBQSxTQUFBQyxHQUNFSixFQUFBSyxZQUFBRCxRQ0xOUCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBeUIsU0FBQSxXQUFBLFNBQUFPLEVBQUFJLEdBQ3ZCSixFQUFBSyxRQUFBLFdBQ0VMLEVBQUFNLFVBQ0VGLEVBQUFHLFFBQ0VMLFNBQUEsWUFDQU0sS0FBQVIsRUFBQU0sV0FFRkcsUUFBQSxTQUFBQyxHQUNFVixFQUFBVyxNQUFBQyxRQUFBRixHQUNBVixFQUFBTSxTQUFBLFFBS05GLEVBQUFTLFFBQ0FKLFFBQUEsU0FBQUUsR0FDRVgsRUFBQVcsTUFBQUEsT0NqQkpwQixRQUFBQyxPQUFBLE9BQ0FzQixRQUFBLFlBQXFCLFFBQUEsU0FBQUMsR0FDbkJDLEtBQUFILE1BQUEsV0FDRSxNQUFBRSxHQUFBRSxJQUFBLGVBRUZELEtBQUFULE9BQUEsU0FBQUcsR0FDRSxNQUFBSyxHQUFBTCxLQUFBLGFBQUFBLE9DTkpuQixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsZ0JBQTRCLFNBQUEsVUFBQSxTQUFBTyxFQUFBTCxHQUMxQkssRUFBQWtCLFNBQUEsU0FBQWhCLEVBQUFDLEdBQ0VSLEVBQUF1QixTQUFBaEIsRUFBQUMsR0FDQU4sS0FBQSxTQUFBQyxHQUNFRSxFQUFBbUIsTUFBQSxRQUFBckIsU0NMTlAsUUFBQUMsT0FBQSxPQUNBNEIsUUFBUSxpQkFBQSxTQUFBQyxHQUNOQSxFQUNBQyxLQUFBLEtBQUE3QixXQUFBLFlBQTJDOEIsWUFBQSwwQkFDM0NELEtBQUEsYUFBQTdCLFdBQUEsZUFBOEM4QixZQUFBLDZCQUM5Q0QsS0FBQSxVQUFBN0IsV0FBQSxZQUEyQzhCLFlBQUEsNkJDTDdDaEMsUUFBQUMsT0FBQSxPQUNBc0IsUUFBQSxXQUFvQixRQUFBLGFBQUEsU0FBQUMsR0FDbEIsR0FBQVMsR0FBQVIsSUFjQVEsR0FBQTVCLFFBQUEsV0FDRSxNQUFBbUIsR0FBQUUsSUFBQSwrQkFDRXBCLEtBQUEsU0FBQTRCLEdBRUUsTUFEQVYsR0FBQVcsU0FBQUMsUUFBQUMsT0FBQSxVQUFBSCxFQUFBQSxLQUNBVixFQUFBRSxJQUFBLGdCQUVGcEIsS0FBQSxTQUFBZ0MsR0FHRSxNQUZBQyxTQUFBQyxJQUFBRixFQUFBSixNQUVBSSxFQUFBSixRQUlORCxFQUFBdkIsTUFBQSxTQUFBQyxFQUFBQyxHQUNFLE1BQUFZLEdBQUFMLEtBQUEsaUJBQ0VSLFNBQUFBLEVBQUFDLFNBQUFBLElBQ0ZOLEtBQUEsU0FBQWdDLEdBR0UsTUFGQUwsR0FBQVEsTUFBQUgsRUFBQUosS0FDQVYsRUFBQVcsU0FBQUMsUUFBQUMsT0FBQSxVQUFBQyxFQUFBSixLQUNBRCxFQUFBNUIsYUFHSjRCLEVBQUFOLFNBQUEsU0FBQWhCLEVBQUFDLEdBQ0UsTUFBQVksR0FBQUwsS0FBQSxjQUNFUixTQUFBQSxFQUFBQyxTQUFBQSxJQUNGTixLQUFBLFdBQ0UsTUFBQTJCLEdBQUF2QixNQUFBQyxFQUFBQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuICAnbmdSb3V0ZSdcbl0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgVXNlclN2Yykge1xuICBVc2VyU3ZjLmdldFVzZXIoKS50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyID0gdXNlclxuICB9KVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkc2NvcGUsIFVzZXJTdmMpIHtcbiAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgIC50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyID0gdXNlclxuICAgIH0pXG4gIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2Yykge1xuICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICB1c2VybmFtZTogJ2RpY2tleXh4eCcsXG4gICAgICAgIGJvZHk6ICAgICAkc2NvcGUucG9zdEJvZHlcbiAgICAgIH0pXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocG9zdCkge1xuICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIFBvc3RzU3ZjLmZldGNoKClcbiAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XG4gICAgJHNjb3BlLnBvc3RzID0gcG9zdHNcbiAgfSlcbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxuICB9XG4gIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKHBvc3QpIHtcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpXG4gIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICBVc2VyU3ZjLnJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpXG4gICAgfSlcbiAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcbiAgJHJvdXRlUHJvdmlkZXJcbiAgLndoZW4oJy8nLCAgICAgICAgIHsgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9wb3N0cy5odG1sJyB9KVxuICAud2hlbignL3JlZ2lzdGVyJywgeyBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICcvdGVtcGxhdGVzL3JlZ2lzdGVyLmh0bWwnIH0pXG4gIC53aGVuKCcvbG9naW4nLCAgICB7IGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLCB0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvbG9naW4uaHRtbCcgfSlcbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24gKCRodHRwLCAkcm9vdFNjb3BlKSB7XG4gIHZhciBzdmMgPSB0aGlzXG4gIC8qXG4gIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvc2Vzc2lvbnMvdmFsaWRhdGVfdXNlcicpXG4gICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gZGF0YS5kYXRhXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJylcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKVxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YVxuICAgICAgfSlcbiAgICB9KVxuICB9ICovXG4gIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvc2Vzc2lvbnMvdmFsaWRhdGVfdXNlcicpXG4gICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IGRhdGEuZGF0YTtcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgLy8kcm9vdFNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpXG4gICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgICB9KVxuICB9XG5cbiAgc3ZjLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgc3ZjLnRva2VuID0gcmVzcG9uc2UuZGF0YVxuICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gcmVzcG9uc2UuZGF0YVxuICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKClcbiAgICB9KVxuICB9XG4gIHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcbiAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICB9KVxuICB9XG5cbn0pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=